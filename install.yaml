---
- name: Setup geproxy
  gather_facts: true
  hosts: all
  become: yes
  handlers:
    - name: Restart systemd-resolved
      ansible.builtin.service:
        name: systemd-resolved
        state: restarted
    
    - name: Create mountpoint
      ansible.builtin.file:
        state: directory
        path: /opt/geproxy/pxe/ubuntu
      notify: Mount the ISO

    - name: Mount the ISO
      ansible.posix.mount:
        path: /opt/geproxy/pxe/ubuntu
        src: /opt/geproxy/pxe/ubuntu.iso
        fstype: iso9660
        opts: ro
        state: mounted # Ensure that this is made permanent in /etc/fstab

  tasks:
  - name: Remove old packages
    tags: prepare
    ansible.builtin.apt:
      state: absent
      name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc

  - name: Install dependencies
    tags: prepare
    ansible.builtin.apt:
      update_cache: yes
      state: present
      name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - lshw
      - rsync
      - pxelinux
      - syslinux-common
      - make
      - binutils
      - perl
      - liblzma-dev
      - mtools
      - gcc

  # Needed to get the nfs server operational when apparmor is installed
  # https://github.com/ehough/docker-nfs-server/blob/develop/doc/feature/apparmor.md
  - name: Check for apparmor
    tags: prepare, nfs
    register: apparmor
    ignore_errors: yes
    ansible.builtin.command: "apparmor_status"

  - name: Install apparmor-utils to setup apparmor
    tags: prepare, nfs
    ansible.builtin.apt:
      state: present
      name:
      - apparmor-utils
    when: apparmor is not failed

  - name: Install a lxc package; just for the lxc apparmor policy ...
    tags: prepare, nfs
    ansible.builtin.apt:
      state: present
      install_recommends: no
      name:
      - liblxc-common
    when: apparmor is not failed

  - name: Add docker repo
    tags: prepare
    block:
    - name: Ensure key folder exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory

    - name: APT key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Get DEB architecture
      ansible.builtin.command: dpkg --print-architecture
      register: deb_architecture

    - name: APT source
      ansible.builtin.apt_repository:
        filename: docker
        repo: "deb [arch={{ deb_architecture.stdout }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

  - name: Install docker
    tags: prepare
    ansible.builtin.apt:
      state: present
      name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
      - docker-compose

  - name: Add user to docker group
    tags: prepare
    user:
      name: '{{ ansible_user }}'
      groups: docker
      append: yes
    when: ansible_user != "root"

  - name: Create geproxy directory and set permissions
    tags: sync, install
    ansible.builtin.file:
      path: /opt/geproxy
      state: directory
      owner: "{{ ansible_user }}"
      group: docker
      mode: u=rwx,g=rwx,o=rx
      recurse: yes

  - name: Synchronize current directory
    tags: sync, install
    become: no
    synchronize:
      src: ./
      dest: /opt/geproxy/
      owner: no
      group: no

  - name: Load apparmor profile for nfs
    tags: prepare, nfs
    ansible.builtin.command: apparmor_parser -r -W /opt/geproxy/pxe/apparmor-nfs
    when: apparmor is not failed

  - name: Change /opt/geproxy permissions to root
    tags: sync, install
    ansible.builtin.file:
      path: /opt/geproxy
      state: directory
      owner: root
      group: root
      mode: u=rwx,g=rwx,o=rx
      recurse: yes

  - name: Check if /etc/netplan/99-geproxy.yaml exists
    tags: install
    ansible.builtin.stat:
      path: /etc/netplan/99-geproxy.yaml
    register: netplan

  - name: Create netplan
    tags: install
    block:
      - name: Check which netplans to rename
        find:
          path: /etc/netplan
          patterns: '*.yaml,*.yml'
        register: cleanup
        ignore_errors: true

      - name: Rename old netplans
        command: "mv '{{ item.path }}' '{{ item.path }}.{{ ansible_date_time.iso8601 }}.old'"
        with_items: "{{ cleanup.files }}"
        ignore_errors: true

      # Construct netplan by discovering public, and private interfaces
      - name: Discover public interface
        ansible.builtin.shell: ip r | awk '/^default/ {print $5}'
        register: public_interface_cmd

      - name: Set public interface
        ansible.builtin.set_fact:
          public_interface: "{{ public_interface_cmd.stdout }}"

      - name: Discover interfaces
        ansible.builtin.shell: "lshw -class network | grep 'logical name' | grep -o '[^ ]*$' | sort -h"
        register: all_interfaces_cmd

      - name: Set all_interfaces
        ansible.builtin.set_fact:
          all_interfaces: "{{ all_interfaces_cmd.stdout_lines }}"

      - name: Set private interfaces
        ansible.builtin.set_fact:
          private_interfaces: "{{ all_interfaces | difference([public_interface]) }}"

      - name: Construct netplan
        ansible.builtin.template:
          src: netplan.j2
          dest: /etc/netplan/99-geproxy.yaml

      - name: Generate netplan
        ansible.builtin.command: "netplan generate"

      - name: Apply netplan
        ansible.builtin.command: "netplan apply"
    when: not netplan.stat.exists

  - name: Disable DNSStubListener
    tags: install
    ansible.builtin.lineinfile:
      path: /etc/systemd/resolved.conf
      state: present
      regexp: '^DNSStubListener\s*=\s*yes'
      line: DNSStubListener=no
    notify:
      - Restart systemd-resolved

  - name: Download ubuntu
    tags: ubuntu
    ansible.builtin.get_url:
      url: https://releases.ubuntu.com/22.04.3/ubuntu-22.04.3-live-server-amd64.iso
      dest: /opt/geproxy/pxe/ubuntu.iso
    notify: Create mountpoint

  - name: Enable NFS
    tags: ipxe
    ansible.builtin.lineinfile:
      state: present
      path: /opt/geproxy/ipxe/src/config/general.h
      line: "#define	DOWNLOAD_PROTO_NFS"

  - name: Generate embed.ipxe
    tags: ipxe
    ansible.builtin.shell:
      chdir: /opt/geproxy/pxe
      cmd: |
        set -a
        source ../.env
        set +a
        
        envsubst '$PRIVATE_IP' < embed.ipxe.template > embed.ipxe

  - name: Build ipxe
    tags: ipxe
    ansible.builtin.command:
      chdir: /opt/geproxy/ipxe/src
      cmd: make bin/undionly.kpxe EMBED=/opt/geproxy/pxe/embed.ipxe

  - name: Copy ipxe
    tags: ipxe
    ansible.builtin.copy:
      src: /opt/geproxy/ipxe/src/bin/undionly.kpxe
      dest: /opt/geproxy/pxe
      remote_src: yes

  # - name: Call deviceregistry
  #   tags: cron
  #   ansible.builtin.cron:
  #     name: "Call deviceregistry"
  #     cron_file: deviceregistry_update
  #     month: "*"
  #     day: "*"
  #     weekday: "*"
  #     hour: "*"
  #     minute: "*"
  #     job: "/usr/bin/curl https://gehack.nl/deviceregistry/?h=$(hostname) --insecure > /dev/null 2> /dev/null"

  - name: Build the composition
    tags: install
    ansible.builtin.command:
      chdir: /opt/geproxy
      cmd: docker-compose up -d
